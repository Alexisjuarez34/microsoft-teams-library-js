variables:
  - group: InfoSec-SecurityResults
  - name: products
    value: 6eff390d-80c0-4456-81b6-6abafa71e768
  - name: tags
    value: production

trigger:
  branches:
    include:
      - 'main'
      - 'release/*'

jobs:
  - job: Security
    displayName: 'Security Tasks'
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: tools/yaml-templates/security.yml

  - job: Build
    displayName: 'Build Test Publish'
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: tools/yaml-templates/build-test-publish.yml

  - job: E2ETest1
    displayName: 'E2E Test - Perf'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: tools/yaml-templates/build-app-host.yml
        parameters:
          appHostGitPath: git://$(AppHostingSdkGitPath)@$(AppHostingSdkGitRef)

      - bash: 'node tools/cli/runAppsWithE2ETests.js --useDataFromLocal=true --appUrl=https://localhost:4002 --reportFileName=e2e-tests-report-perf --envType=perf'
        displayName: 'Run E2E Perf tests'
        condition: succeeded()
        workingDirectory: '$(AppHostingSdkProjectDirectory)'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/e2e-tests-report*.xml'
          testRunTitle: 'E2E Tests - Perf'
          mergeTestResults: true
        condition: succeededOrFailed()

  - job: E2ETest2
    displayName: 'E2E Test - Default'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
      - template: tools/yaml-templates/build-app-host.yml
        parameters:
          appHostGitPath: git://$(AppHostingSdkGitPath2)@$(AppHostingSdkGitRef)

      - bash: 'node tools/cli/runAppsWithE2ETests.js --useDataFromLocal=true'
        displayName: 'Run E2E integration tests'
        condition: succeeded()
        workingDirectory: '$(AppHostingSdkProjectDirectory)'

      - task: CMDLine@2
        displayName: 'Run tests for electron webview'
        inputs:
          script: |
            pnpm exec xvfb-maybe playwright test
          workingDirectory: '$(AppHostingSdkProjectDirectory)'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/e2e-tests-report*.xml'
          testRunTitle: 'E2E Tests - Default'
          mergeTestResults: true
        condition: succeededOrFailed()

  - job: E2ETest3
    displayName: 'E2E Test - Local Tag'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: tools/yaml-templates/build-app-host.yml
        parameters:
          appHostGitPath: git://$(AppHostingSdkGitPath3)@$(AppHostingSdkGitRef)

      - task: CmdLine@2
        displayName: 'Build Test App Local'
        inputs:
          script: |
            pnpm build-test-app-local
          workingDirectory: '$(ClientSdkProjectDirectory)'

      - bash: 'node tools/cli/runAppsWithE2ETests.js --useDataFromLocal=true --reportFileName=e2e-tests-report-local-script-tag --envType=localScriptTag'
        displayName: 'Run E2E integration tests with local script tag'
        condition: succeeded()
        workingDirectory: '$(AppHostingSdkProjectDirectory)'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/e2e-tests-report*.xml'
          testRunTitle: 'E2E Tests - Local Tag'
          mergeTestResults: true
        condition: succeededOrFailed()

  - job: E2ETestCDN
    displayName: 'E2E Test - CDN (only runs on release builds)'
    # This test only runs after deployment from a release branch and the new CDN version has been deployed
    # This check will run on the PR to merge the release branch back into main
    condition: and(
      eq(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['System.PullRequest.SourceBranch'], 'release/'),
      eq(variables['System.PullRequest.TargetBranch'], 'main')
      )
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: tools/yaml-templates/build-app-host.yml
        parameters:
          appHostGitPath: git://$(AppHostingSdkGitPath6)@$(AppHostingSdkGitRef)

      - task: CmdLine@2
        displayName: 'Build Test App CDN'
        inputs:
          script: |
            pnpm build-test-app-CDN
          workingDirectory: '$(ClientSdkProjectDirectory)'

      - bash: 'node tools/cli/runAppsWithE2ETests.js --useDataFromLocal=true --reportFileName=e2e-tests-report-cdn-script-tag --envType=cdnScriptTag'
        displayName: 'Run E2E integration tests with local script tag on latest cdn bundles'
        condition: succeeded()
        workingDirectory: '$(AppHostingSdkProjectDirectory)'
        enabled: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/e2e-tests-report*.xml'
          testRunTitle: 'E2E Tests - CDN'
          mergeTestResults: true
        condition: succeededOrFailed()

  - job: E2ETestAndroid
    displayName: 'E2E Test - Android'
    pool:
      vmImage: 'internal-macos-11'
    steps:
      - template: tools/yaml-templates/android-test.yml
        parameters:
          androidAppHostingSdkGitPath: git://$(AndroidAppHostingSdkGitPath)

  - job: E2ETestIOSDev
    displayName: 'E2E Test - IOS DEV'
    pool:
      vmImage: 'internal-macos12'
    steps:
      - template: tools/yaml-templates/build-app-host-ios.yml
        parameters:
          iOSAppHostingSdkGitPath: git://$(IOSAppHostingSdkGitPath)

      - bash: /usr/bin/xcodebuild
          -configuration Release
          -workspace /Users/runner/work/1/iOSHost/$(IOSSdkWorkspace).xcworkspace
          -scheme $(IOSSdkScheme)
          -sdk iphonesimulator
          -parallel-testing-enabled YES
          -parallel-testing-worker-count 2
          -destination 'platform=iOS Simulator,name=iPhone 14 Pro,OS=16.2'
          -screenshot-enabled="YES"
          -test-iterations 3
          -retry-tests-on-failure
          -quiet
          -resultBundlePath TestResults
          test > report.out 2>&1

          if [[ $? == 0 ]];
          then
          echo "E2E Test passes successfully";
          exit 0;
          else
          echo "E2E Test failed";
          exit 1;
          fi;
        displayName: 'iOS UI/E2E Tests'
        workingDirectory: '$(Agent.BuildDirectory)/iOSHost'

      - template: tools/yaml-templates/build-test-publish-ios.yml

  - job: E2ETestIOSBackCompat
    displayName: 'E2E Test - IOS Back Compat'
    pool:
      vmImage: 'internal-macos12'
    steps:
      - template: tools/yaml-templates/build-app-host-ios.yml
        parameters:
          iOSAppHostingSdkGitPath: git://$(IOSAppHostingSdkGitPath)

      - bash: |
          sudo pip3 install selenium
        displayName: Run pip install selenium for scraping
        workingDirectory: '$(Agent.BuildDirectory)/iOSHost'

      - bash: |
          pnpm install
        displayName: 'Install BCAET tool'
        workingDirectory: '$(Agent.BuildDirectory)/iOSHost/backcompattool'

      - bash: |
          pnpm test:e2e 2>&1
        displayName: 'Generate test files on latest version Teams-JS Library'
        workingDirectory: '$(Agent.BuildDirectory)/iOSHost/backcompattool'

      - bash: /usr/bin/xcodebuild
          -configuration Release
          -workspace /Users/runner/work/1/iOSHost/$(IOSSdkWorkspace).xcworkspace
          -scheme $(IOSSdkScheme)
          -sdk iphonesimulator
          -parallel-testing-enabled YES
          -parallel-testing-worker-count 2
          -destination 'platform=iOS Simulator,name=iPhone 14 Pro,OS=16.2'
          -screenshot-enabled="YES"
          -test-iterations 3
          -retry-tests-on-failure
          -quiet
          -resultBundlePath TestResults
          test > report.out 2>&1

          if [[ $? == 0 ]];
          then
          echo "E2E Test passes successfully";
          exit 0;
          else
          echo "E2E Test failed";
          exit 1;
          fi;
        displayName: 'iOS UI/E2E Tests'
        workingDirectory: '$(Agent.BuildDirectory)/iOSHost'

      - template: tools/yaml-templates/build-test-publish-ios.yml
